{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","isOwner","isRegister","whitelistArray","contractWorkflowStatus","proposalArray","accountBalance","workflowStatusDescription","winningProposalId","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","Contract","abi","address","methods","getWorkflowStatus","call","tmp_wf","nextWorkflow","toString","getWhitelist","getProposal","setState","getBalance","owner","contractOwner","alert","error","context","parseInt","startProposalsRegistration","send","from","gasPrice","endProposalsRegistration","startVotingSession","endVotingSession","tally","erreur","tx","getTransactionReceipt","receipt","status","getWinningProposalId","getPastEvents","filter","_from","fromBlock","toBlock","events","whitelist","addressWhitelist","value","register","logs","response","allEvents","proposal","proposalDescription","registerProposal","vote","voteId","buttonLabel","this","Grid","item","sm","Button","onClick","color","variant","display","justifyContent","label","style","Card","width","Header","Body","ListGroup","Item","Table","striped","bordered","hover","map","key","Form","Group","Control","type","id","ref","input","p","description","min","max","length","className","AppBar","position","elevation","Toolbar","Typography","noWrap","Container","maxWidth","component","container","spacing","alignItems","href","renderWorklfowStatus","renderWorkflowButtons","renderVoterRegistration","renderProposalsRegistration","renderVotingSession","renderVotesTallied","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","origin","fetch","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b00865d9.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\n//ALL MATERIAL UI\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\n\n\n\n\nclass App extends Component {\n  //Mettre tout les states de l'app en généralz\n  state = { web3: null, accounts: null, contract: null, isOwner: false, isRegister: false, whitelistArray: null, contractWorkflowStatus: 0, proposalArray: null, accountBalance: 0, workflowStatusDescription: null, winningProposalId: 0 };\n  //Sortir certaines var du state et faire des var global?\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const contract = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n\n      const contractWorkflowStatus = await contract.methods.getWorkflowStatus().call();\n      //contractWorkflowStatus = parseInt(contractWorkflowStatus);\n      let tmp_wf = contractWorkflowStatus;\n      let workflowStatusDescription = \"\";\n      let nextWorkflow = \"\";\n\n\n      switch (tmp_wf.toString()) {\n        case '0':\n          workflowStatusDescription = \"Registering Voters\";\n          nextWorkflow = \"Proposals Registration Started\";\n          break;\n        case '1':\n          workflowStatusDescription = \"Proposals Registration Started\";\n          nextWorkflow = \"Proposals Registration Ended\";\n          break;\n        case '2':\n          workflowStatusDescription = \"Proposals Registration Ended\";\n          nextWorkflow = \"Voting Session Started\";\n          break;\n        case '3':\n          workflowStatusDescription = \"Voting Session Started\";\n          nextWorkflow = \"Voting Session Ended\";\n          break;\n        case '4':\n          workflowStatusDescription = \"Voting Session Ended\";\n          nextWorkflow = \"Votes Tallied\";\n          break;\n        case '5':\n          workflowStatusDescription = \"Votes Tallied\";\n          break;\n        default:\n          workflowStatusDescription = \"Unknown Status\";\n      }\n\n      let whitelistArray = await contract.methods.getWhitelist().call();\n      if (contractWorkflowStatus >= 1) {\n        let proposalArray = await contract.methods.getProposal().call();\n        this.setState({ proposalArray });\n        console.log(proposalArray);\n      }\n\n      if (contractWorkflowStatus == 5) {\n        const winningProposalId = await contract.methods.winningProposalId().call();\n        this.setState({ winningProposalId });\n        console.log('winningProposalId', winningProposalId);\n      }\n\n\n      let accountBalance = await web3.eth.getBalance(accounts[0]);\n      this.state.contractOwner = await contract.methods.owner().call();\n\n      if (this.state.contractOwner === accounts[0]) {\n        this.setState({ isOwner: true });\n      }\n\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract, whitelistArray, accountBalance, workflowStatusDescription, contractWorkflowStatus, nextWorkflow });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  nextWorkflow = async () => {\n    const { accounts, contract, web3 } = this.state;\n    const context = this;\n    switch (parseInt(this.state.contractWorkflowStatus)) {\n      case 0:\n        await contract.methods.startProposalsRegistration().send({ from: accounts[0], gasPrice: 100000 }, this.getWorkflowStatus);\n        break;\n      case 1:\n        await contract.methods.endProposalsRegistration().send({ from: accounts[0], gasPrice: 100000 }, this.getWorkflowStatus);\n        break;\n      case 2:\n        await contract.methods.startVotingSession().send({ from: accounts[0], gasPrice: 100000 }, this.getWorkflowStatus);\n        break;\n      case 3:\n        await contract.methods.endVotingSession().send({ from: accounts[0], gasPrice: 100000 }, this.getWorkflowStatus);\n        break;\n      case 4:\n        await contract.methods.tally().send({ from: accounts[0], gasPrice: 100000 }, async (erreur, tx) => {\n          if (tx) {\n            await web3.eth.getTransactionReceipt(tx, async function (erreur, receipt) {\n              if (receipt.status) {\n                const winningProposalId = await contract.methods.getWinningProposalId().call();\n                context.setState({ winningProposalId });\n              }\n            });\n          }\n        });\n        break;\n      case 5:\n        console.log('Contrat arrivé à échéance')\n    }\n    contract.getPastEvents('WorkflowStatusChange', { filter: { _from: accounts[0] }, fromBlock: 0, toBlock: 'latest' }, function (error, events) { if (!error) console.log(events) });\n  };\n\n  getWorkflowStatus = async (erreur, tx) => {\n    if (tx) {\n      const { contract, web3 } = this.state;\n      const context = this;\n      await web3.eth.getTransactionReceipt(tx, async function (erreur, receipt) {\n        if (receipt.status) {\n          const contractWorkflowStatus = await contract.methods.getWorkflowStatus().call();\n          console.log(`contractWorkflowStatus ${contractWorkflowStatus} `);\n          context.setState({ contractWorkflowStatus });\n        }\n      });\n    }\n  }\n\n  whitelist = async () => {\n    const { accounts, contract, web3 } = this.state;\n    const addressWhitelist = this.addressWhitelist.value;\n    let context = this;\n    await contract.methods.register(addressWhitelist).send({ from: accounts[0], gasPrice: 100000 }, async function (erreur, tx) {\n      if (tx) {\n        console.log(\"[register] tx : \", tx);\n        await web3.eth.getTransactionReceipt(tx, async function (erreur, receipt) {\n          console.log(\"[register] receipt.logs :\", receipt.logs);\n          if (receipt.status) {\n            let response = await contract.methods.getWhitelist().call();\n            context.setState({ whitelistArray: response });\n            context.addressWhitelist.value = \"\";\n\n            let events = contract.events.allEvents();\n            console.log(events);\n          }\n        })\n      }\n    });\n  };\n\n  proposal = async () => {\n    const { accounts, contract, web3 } = this.state;\n    const proposalDescription = this.proposalDescription.value;\n    let context = this;\n    await contract.methods.registerProposal(proposalDescription).send({ from: accounts[0], gasPrice: 100000 }, async function (erreur, tx) {\n      if (tx) {\n        console.log(\"[registerProposal] tx : \", tx);\n        await web3.eth.getTransactionReceipt(tx, async function (erreur, receipt) {\n          console.log(\"[registerProposal] receipt.logs :\", receipt.logs);\n          if (receipt.status) {\n            let response = await contract.methods.getProposal().call();\n            context.setState({ proposalArray: response });\n            context.proposalDescription.value = \"\";\n          }\n        })\n      }\n    });\n  };\n\n  vote = async () => {\n    const { accounts, contract, web3 } = this.state;\n    const voteId = this.voteId.value;\n    let context = this;\n    // Interaction avec le smart contract pour ajouter un compte \n    await contract.methods.vote(voteId).send({ from: accounts[0], gasPrice: 100000 }, async function (erreur, tx) {\n      if (tx) {\n        console.log(\"[vote] tx : \", tx);\n        await web3.eth.getTransactionReceipt(tx, async function (erreur, receipt) {\n          console.log(\"[vote] receipt.logs :\", receipt.logs);\n          if (receipt.status) {\n            let response = await contract.methods.getProposal().call();\n            context.setState({ proposalArray: response });\n            context.voteId.value = 0;\n          }\n        })\n      }\n    });\n  };\n\n  renderWorkflowButtons() {\n    let buttonLabel = \"Status du contrat inconnu !\";\n    let status = parseInt(this.state.contractWorkflowStatus);\n    switch (status) {\n      case 0:\n        buttonLabel = \"Démarrer la session d'enregistrement des propositions\";\n        break;\n      case 1:\n        buttonLabel = \"Terminer la session d'enregistrement des propositions\";\n        break;\n      case 2:\n        buttonLabel = \"Démarrer la session de votes\";\n        break;\n      case 3:\n        buttonLabel = \"Terminer la session de votes\";\n        break;\n      case 4:\n        buttonLabel = \"Compter les votes\";\n        break;\n    }\n    if (status < 5) {\n      return (\n        <Grid item sm={12}>\n          <br></br>\n          <Button onClick={this.nextWorkflow} color=\"secondary\" variant=\"contained\" display=\"flex\" justifyContent=\"flex-end\"> {buttonLabel} </Button>\n        </Grid>\n      );\n    } else {\n      return (\n        <Grid item sm={12}>\n          <br></br>\n          <h5>Vote terminé</h5>\n        </Grid>\n      );\n    }\n  }\n\n  renderWorklfowStatus() {\n    let label = \"Status du contrat inconnu !\";\n    switch (parseInt(this.state.contractWorkflowStatus)) {\n      case 0:\n        label = \"RegisteringVoters\";\n        break;\n      case 1:\n        label = \"ProposalsRegistrationStarted\";\n        break;\n      case 2:\n        label = \"ProposalsRegistrationEnded\";\n        break;\n      case 3:\n        label = \"VotingSessionStarted\";\n        break;\n      case 4:\n        label = \"VotingSessionEnded\";\n        break;\n      case 5:\n        label = \"VotesTallied\";\n        break;\n    }\n    return (\n      <h5 color=\"primary\">Workflow Status = { label} ({ this.state.contractWorkflowStatus}) </h5>\n    );\n  }\n\n  renderVoterRegistration() {\n    if (parseInt(this.state.contractWorkflowStatus) === 0) {\n      if (this.state.isOwner) {\n        return (\n          <Grid item sm={12}>\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\n              <Card style={{ width: '50rem' }}>\n                <Card.Header><strong>Liste des électeurs enregistrés</strong></Card.Header>\n                <Card.Body>\n                  <ListGroup variant=\"flush\">\n                    <ListGroup.Item>\n                      <Table striped bordered hover>\n                        <thead>\n                          <tr>\n                            <th>@</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {this.state.whitelistArray !== null &&\n                            this.state.whitelistArray.map((a) => <tr key={a}><td>{a}</td></tr>)\n                          }\n                        </tbody>\n                      </Table>\n                    </ListGroup.Item>\n                  </ListGroup>\n                </Card.Body>\n              </Card>\n            </div>\n            <br></br>\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\n              <Card style={{ width: '50rem' }}>\n                <Card.Header><strong>Enregistrer un nouvel électeur</strong></Card.Header>\n                <Card.Body>\n                  <Form.Group>\n                    <Form.Control type=\"text\" id=\"address\"\n                      ref={(input) => { this.addressWhitelist = input }}\n                    />\n                  </Form.Group>\n                  <Button onClick={this.whitelist} variant=\"contained\" color=\"primary\" > Enregistrer </Button>\n                </Card.Body>\n              </Card>\n            </div>\n          </Grid>\n        );\n      } else {\n        return (\n          <Grid item sm={12}>\n            <h3>Veuillez attendre la fin de l'enregistrement des électeurs ...</h3>\n          </Grid>\n        );\n      }\n    } else {\n      return (\n        <Grid item sm={12}>\n        </Grid>\n      );\n    }\n  }\n\n  renderProposalsRegistration() {\n    let status = parseInt(this.state.contractWorkflowStatus);\n    return (\n      <Grid item sm={12}>\n        {status > 0 &&\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\n            <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>Liste des propositions</strong></Card.Header>\n              <Card.Body>\n                <ListGroup variant=\"flush\">\n                  <ListGroup.Item>\n                    <Table striped bordered hover>\n                      <tbody>\n                        {this.state.proposalArray !== null &&\n                          this.state.proposalArray.map((p) => <tr key={p.description}><td>{p.description}</td></tr>)\n                        }\n                      </tbody>\n                    </Table>\n                  </ListGroup.Item>\n                </ListGroup>\n              </Card.Body>\n            </Card>\n          </div>\n        }\n        <br></br>\n        {status === 1 &&\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\n            <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>Enregistrer une nouvelle proposition</strong></Card.Header>\n              <Card.Body>\n                <Form.Group>\n                  <Form.Control type=\"text\" id=\"proposalDescription\"\n                    ref={(input) => { this.proposalDescription = input }}\n                  />\n                </Form.Group>\n                <Button onClick={this.proposal} variant=\"contained\" color=\"primary\" > Enregistrer </Button>\n              </Card.Body>\n            </Card>\n          </div>\n        }\n      </Grid>\n    );\n  }\n\n  renderVotingSession() {\n    let status = parseInt(this.state.contractWorkflowStatus);\n    return (\n      <Grid item sm={12}>\n        {status === 3 &&\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\n            <Card style={{ width: '50rem' }}>\n              <Card.Header><strong>Voter pour la proposition</strong></Card.Header>\n              <Card.Body>\n                <Form.Group>\n                  <Form.Control type=\"number\" id=\"voteId\" min={0} max={this.state.proposalArray.length - 1}\n                    ref={(input) => { this.voteId = input }}\n                  />\n                </Form.Group>\n                <Button onClick={this.vote} variant=\"contained\" color=\"primary\" > Voter </Button>\n              </Card.Body>\n            </Card>\n          </div>\n        }\n      </Grid>\n    );\n  }\n\n  renderVotesTallied() {\n    let status = parseInt(this.state.contractWorkflowStatus);\n    if (status === 5) {\n      return (\n        <h5 color=\"primary\">Proposition gagnante: { this.state.winningProposalId} </h5>\n      );\n    } if (status === 4) {\n      return (\n        <h5 color=\"primary\">Suspens ... </h5>\n      );\n    } else {\n      return (\n        <h5 color=\"primary\">... </h5>\n      );\n    }\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <AppBar position=\"static\" color=\"primary\" elevation={2} >\n          <Toolbar >\n            <Typography variant=\"h6\" color=\"inherit\" noWrap >\n              Système de vote\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Container maxWidth=\"sm\" component=\"main\">\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item sm={12}>\n              {this.state.isOwner ?\n                <h2>Vous êtes l'Administrateur</h2>\n                : <h2>Vous n'êtes pas l'Administrateur</h2>\n              }\n              <div color=\"textPrimary\" href=\"#\" >\n                {this.state.accounts}\n              </div>\n              <br />\n              {this.renderWorklfowStatus()}\n              {this.state.isOwner ?\n                this.renderWorkflowButtons()\n                : <span />\n              }\n            </Grid>\n            {this.renderVoterRegistration()}\n            {this.renderProposalsRegistration()}\n            {this.renderVotingSession()}\n            {this.renderVotesTallied()}\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport {Router,Switch,Route} from 'react-router-dom';\n\nReactDOM.render(\n<App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}